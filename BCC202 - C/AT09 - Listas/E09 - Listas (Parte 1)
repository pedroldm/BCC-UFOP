#define INICIO 0
#define MAXTAM 1000

typedef struct {
    /*Componentes*/
} TItem;

typedef struct {
    TItem item [MAXTAM]
    int primeiro, ultimo;
} TLista;

void concatenarListas (TLista *lista1, TLista *lista2){
    for (int i = lista2->primeiro; i < lista2->ultimo; i++){
        lista1->ultimo++;
        lista1->item[lista1->ultimo] = lista2->item[i];
    }
}

void dividirListas (TLista *lista1, TLista *lista2, int i){
    lista2->ultimo = INICIO;
    lista2->primeiro = INICIO;

    for (int j = i; j < lista1->ultimo; j++){
        lista2->item[lista2->ultimo] = lista1->item[j];
        lista2->ultimo++;
        lista1->ultimo--;
    }
}

void copiarListas (TLista *lista1, TLista *lista2){
    lista2->primeiro = lista1->primeiro;
    lista2->ultimo = lista1->ultimo;

    for (int i = lista1->primeiro; i < lista2->ultimo; i++{
        lista2->item[i] = lista1->item[i];
    }
}

int pesquisarElemento (TLista *lista1, int elemento){
    for (int i = lista1->primeiro; i < lista1->ultimo; i++){
        (if lista1->item[i].elemento == elemento)
            return i;
    }

    return 0;
}

---------------------------------------------------

typedef struct
{
    int nroInteiro;
} TItem;

typedef struct celula
{
    struct celula *pProx;
    TItem item;
} TCelula;

typedef struct
{
    TCelula *pPrimeiro, *pUltimo;
} TLista;

void concatenarListas (TLista *lista1, TLista, *lista2){
    lista1->pUltimo->pProx = lista2->pPrimeiro;
    lista1->pUltimo = lista2->Ultimo;
}

void dividirListas (TLista *lista1, TLista *lista2, int i){
    TCelula *pAux;

    for (pAux = lista1->pPrimeiro; pAux->item.nroInteiro = i; pAux = pAux->pProx){
        lista2->pPrimeiro = pAux->pProx;
        lista2->pUltimo = lista1->pUltimo;
        lista1->pUltimo = pAux;
    }
}

void copiarListas (TLista *lista1, TLista *lista2){
    TCelula *pAux;
    lista2->pPrimeiro = lista1->pPrimeiro;
    lista2-pUltimo = lista2->pUltimo;

    for (pAux = lista1->pPrimeiro; (pAux = NULL); pAux = pAux->pProx){
        lista2->item = pAux->item;
        lista2->pProx = pAux->pProx;
    }
}

int pesquisarElemento (TLista *lista1, int elemento){
    TCelula *pAux;

    for (pAux = lista1->pPrimeiro; (pAux = NULL); pAux = pAux->pProx){
        if (pAux->item.nroInteiro == elemento) return 1;
    }
    return 0;
}